using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Globalization;

namespace Prakt4
{
    public partial class MainWindow : Window
    {
        private StringBuilder Builder = new StringBuilder();
        private bool newInput = false;
        private bool Error = false;
        private double lastResult = 0;
        private string lastOperation = "";
        private bool exponentiation = false;
        private double exponentiationBase = 0;
        private bool bracketOpen = false;
        private List<string> expressionTokens = new List<string>();

        public MainWindow()
        {
            InitializeComponent();
            ClearAll();
        }

        private void ClearAll()
        {
            Builder.Clear();
            newInput = false;
            Error = false;
            lastResult = 0;
            lastOperation = string.Empty;
            exponentiation = false;
            exponentiationBase = 0;
            bracketOpen = false;
            expressionTokens.Clear();
            ExpressionTextBlock.Text = "";
            ResultTextBlock.Text = "0";
        }

        private void ClearEntry()
        {
            ResultTextBlock.Text = "0";
            newInput = false;
        }

        private void Add(string value)
        {
            if (Error)
            {
                Builder.Clear();
                Error = false;
            }
            Builder.Append(value);
            ExpressionTextBlock.Text = Builder.ToString();
        }

        private void Button5_Click(object sender, RoutedEventArgs e)
        {
            if (Error) ClearAll();

            var button = (Button)sender;
            string digit = button.Content.ToString();

            if (newInput)
            {
                if (ExpressionTextBlock.Text.EndsWith("="))
                {
                    Builder.Clear();
                    ExpressionTextBlock.Text = "";
                }
                ResultTextBlock.Text = digit;
                newInput = false;
            }
            else
            {
                if (ResultTextBlock.Text == "0")
                {
                    ResultTextBlock.Text = digit;
                }
                else
                {
                    ResultTextBlock.Text += digit;
                }
            }
        }

        private void Button4_Click(object sender, RoutedEventArgs e)
        {
            if (Error) ClearAll();

            var button = (Button)sender;
            string operation = button.Content.ToString();

            if (operation == "(")
            {
                bracketOpen = true;
                Add("(");
                expressionTokens.Add("(");
                newInput = true;
                return;
            }
            else if (operation == ")")
            {
                if (!bracketOpen) return;
                Add(ResultTextBlock.Text + ")");
                expressionTokens.Add(ResultTextBlock.Text);
                expressionTokens.Add(")");
                bracketOpen = false;
                newInput = true;
                return;
            }

            try
            {
                double currentValue = double.Parse(ResultTextBlock.Text, CultureInfo.InvariantCulture);

                if (ExpressionTextBlock.Text.EndsWith("="))
                {
                    Builder.Clear();
                    Builder.Append(lastResult);
                    lastOperation = operation;
                    Add($"{lastResult} {operation} ");
                    expressionTokens.Add(lastResult.ToString());
                    expressionTokens.Add(operation);
                    newInput = true;
                    return;
                }

                expressionTokens.Add(currentValue.ToString());
                expressionTokens.Add(operation);

                lastOperation = operation;
                Add($"{currentValue} {operation} ");
                newInput = true;
            }
            catch (Exception ex)
            {
                HandleError(ex.Message);
            }
        }

        private double CalculateFunction(double value, string function)
        {
            switch (function)
            {
                case "sin": return Math.Sin(value * Math.PI / 180);
                case "cos": return Math.Cos(value * Math.PI / 180);
                case "tg": return Math.Tan(value * Math.PI / 180);
                case "x^2": return Math.Pow(value, 2);
                case "1/x": return value == 0 ? throw new DivideByZeroException() : 1 / value;
                case "|x|": return Math.Abs(value);
                case "2√x": return Math.Sqrt(value);
                case "π": return Math.PI;
                case "e": return Math.E;
                case "10^x": return Math.Pow(10, value);
                case "log": return Math.Log10(value);
                case "ln": return Math.Log(value);
                default: return value;
            }
        }

        private void HandleError(string message)
        {
            ResultTextBlock.Text = "Error";
            ExpressionTextBlock.Text = message;
            Error = true;
        }

        private void EvaluateExpression()
        {
            try
            {
                if (!newInput)
                {
                    expressionTokens.Add(ResultTextBlock.Text);
                }

                List<string> tokens = new List<string>(expressionTokens);

                tokens = ProcessBrackets(tokens);


                tokens = ProcessOperations(tokens, new[] { "^" }); 
                tokens = ProcessOperations(tokens, new[] { "*", "/" });
                tokens = ProcessOperations(tokens, new[] { "+", "-" });  

                if (tokens.Count == 1)
                {
                    lastResult = double.Parse(tokens[0], CultureInfo.InvariantCulture);
                    ResultTextBlock.Text = lastResult.ToString(CultureInfo.InvariantCulture);
                }
            }
            catch (Exception ex)
            {
                HandleError(ex.Message);
            }
        }

        private List<string> ProcessBrackets(List<string> tokens)
        {
            while (tokens.Contains("("))
            {
                int openIndex = tokens.LastIndexOf("(");
                int closeIndex = tokens.IndexOf(")", openIndex);

                if (closeIndex == -1) throw new ArgumentException("Не закрыта скобка");

                List<string> subExpression = tokens.GetRange(openIndex + 1, closeIndex - openIndex - 1);

                subExpression = ProcessOperations(subExpression, new[] { "^" });
                subExpression = ProcessOperations(subExpression, new[] { "*", "/" });
                subExpression = ProcessOperations(subExpression, new[] { "+", "-" });

                tokens.RemoveRange(openIndex, closeIndex - openIndex + 1);
                tokens.Insert(openIndex, subExpression[0]);
            }

            return tokens;
        }

        private List<string> ProcessOperations(List<string> tokens, string[] operations)
        {
            for (int i = 1; i < tokens.Count - 1; i++)
            {
                string token = tokens[i];
                if (Array.IndexOf(operations, token) >= 0)
                {
                    double left = double.Parse(tokens[i - 1], CultureInfo.InvariantCulture);
                    double right = double.Parse(tokens[i + 1], CultureInfo.InvariantCulture);
                    double result = 0;

                    switch (token)
                    {
                        case "*":
                            result = left * right;
                            break;
                        case "/":
                            if (right == 0) throw new DivideByZeroException();
                            result = left / right;
                            break;
                        case "^":
                            result = Math.Pow(left, right);
                            break;
                        case "+":
                            result = left + right;
                            break;
                        case "-":
                            result = left - right;
                            break;
                    }
                    tokens[i - 1] = result.ToString(CultureInfo.InvariantCulture);
                    tokens.RemoveRange(i, 2);
                    i--; 
                }
            }

            return tokens;
        }

        private void Button1_Click(object sender, RoutedEventArgs e)
        {
            if (Error) ClearAll();

            var button = (Button)sender;
            string function = button.Content.ToString();

            if (function == "x^y")
            {
                try
                {
                    exponentiationBase = double.Parse(ResultTextBlock.Text, CultureInfo.InvariantCulture);
                    exponentiation = true;
                    Add($"{exponentiationBase}^");
                    expressionTokens.Add(exponentiationBase.ToString());
                    expressionTokens.Add("^");
                    newInput = true;
                    return;
                }
                catch (Exception ex)
                {
                    HandleError(ex.Message);
                    return;
                }
            }

            if (function == "n!")
            {
                try
                {
                    int value = (int)double.Parse(ResultTextBlock.Text, CultureInfo.InvariantCulture);
                    double result = Factorial(value);
                    ResultTextBlock.Text = result.ToString(CultureInfo.InvariantCulture);
                    Add($"{value}!");
                    expressionTokens.Add($"{value}!");
                    newInput = true;
                    return;
                }
                catch (Exception ex)
                {
                    HandleError(ex.Message);
                    return;
                }
            }

            try
            {
                double value = double.Parse(ResultTextBlock.Text, CultureInfo.InvariantCulture);
                double result = CalculateFunction(value, function);

                ResultTextBlock.Text = result.ToString(CultureInfo.InvariantCulture);
                Add($"{function}({value})");
                expressionTokens.Add($"{function}({value})");
                newInput = true;
            }
            catch (Exception ex)
            {
                HandleError(ex.Message);
            }
        }

        private void Button9_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (exponentiation)
                {
                    double exponent = double.Parse(ResultTextBlock.Text, CultureInfo.InvariantCulture);
                    double result = Math.Pow(exponentiationBase, exponent);
                    ExpressionTextBlock.Text = $"{exponentiationBase}^{exponent} =";
                    ResultTextBlock.Text = result.ToString(CultureInfo.InvariantCulture);
                    exponentiation = false;
                    exponentiationBase = 0;
                    newInput = true;
                    lastResult = result;
                    expressionTokens.Clear();
                    return;
                }

                if (expressionTokens.Count > 0)
                {
                    string expression = Builder.ToString() + ResultTextBlock.Text;
                    EvaluateExpression();
                    ExpressionTextBlock.Text = $"{expression} =";
                    newInput = true;
                    expressionTokens.Clear();
                }
                else if (bracketOpen)
                {
                    ExpressionTextBlock.Text = Builder.ToString() + ResultTextBlock.Text + ")";
                    bracketOpen = false;
                    newInput = true;
                }
            }
            catch (Exception ex)
            {
                HandleError(ex.Message);
            }
        }

        private double Factorial(int n)
        {
            if (n < 0) throw new ArgumentException("Факториал нельзя найти для отрицательного числа");
            if (n > 170) throw new ArgumentException("Слишком большое число, введите значение не превышающее 170");
            if (n == 0) return 1;

            double result = 1;
            for (int i = 2; i <= n; i++)
            {
                result *= i;
            }
            return result;
        }

        private void Button2_Click(object sender, RoutedEventArgs e) => ClearAll();
        private void Button3_Click(object sender, RoutedEventArgs e) => ClearEntry();

        private void Button8_Click(object sender, RoutedEventArgs e)
        {
            if (newInput)
            {
                ResultTextBlock.Text = "0.";
                newInput = false;
            }
            else if (!ResultTextBlock.Text.Contains("."))
            {
                ResultTextBlock.Text += ".";
            }
        }

        private void Button7_Click(object sender, RoutedEventArgs e)
        {
            if (ResultTextBlock.Text != "0")
            {
                ResultTextBlock.Text = ResultTextBlock.Text.StartsWith("-")
                    ? ResultTextBlock.Text.Substring(1)
                    : "-" + ResultTextBlock.Text;
            }
        }
    }
}
